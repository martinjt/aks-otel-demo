mode: daemonset
nameOverride: collector
resources:
  limits:
    cpu: 1
    memory: 1Gi
presets:
  kubeletMetrics:
    enabled: true
  hostMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
image:
  tag: "0.81.0"
config:
  receivers:
    prometheus: null
    kubeletstats:
      metric_groups:
        - node
        - pod
    otlp:
      protocols:
        grpc:
        http:
          cors:
            allowed_origins:
              - http://*
              - https://*
          endpoint: 0.0.0.0:4318
  processors:
    k8sattributes/kubeletstats:
      extract:
        metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.node.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
      passthrough: false 
      filter:  
        node_from_env_var: K8S_NODE_NAME
      pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name

    filter/ignore_queue_size:
      error_mode: ignore
      metrics:
        metric:
          - 'name == "queueSize"'
    metricstransform/podnetwork_aggregation:
      transforms:
        - include: k8s.pod.network.io
          match_type: strict
          experimental_match_labels: 
            direction: receive
          action: insert
          new_name: k8s.pod.network.io.receive_bytes
          operations:
            - action: aggregate_labels
              label_set: [k8s.namespace, k8s.pod.name, k8s.pod.uid, k8s.node.name]
              aggregation_type: sum
        - include: k8s.pod.network.io
          match_type: strict
          experimental_match_labels: 
            direction: transmit
          action: insert
          new_name: k8s.pod.network.io.transmit_bytes
          operations:
            - action: aggregate_labels
              label_set: [k8s.namespace, k8s.pod.name, k8s.pod.uid, k8s.node.name]
              aggregation_type: sum
    metricstransform/nodenetwork_aggregation:
      transforms:
        - include: k8s.node.network.io
          match_type: strict
          experimental_match_labels: 
            direction: receive
          action: insert
          new_name: k8s.node.network.io.receive_bytes
          operations:
            - action: aggregate_labels
              label_set: [k8s.node.name]
              aggregation_type: sum
        - include: k8s.node.network.io
          match_type: strict
          experimental_match_labels: 
            direction: transmit
          action: insert
          new_name: k8s.node.network.io.transmit_bytes
          operations:
            - action: aggregate_labels
              label_set: [k8s.node.name]
              aggregation_type: sum

    filter/networkmetrics:
      error_mode: ignore
      metrics:
        metric:
        - 'name == "k8s.pod.network.io"'
        - 'name == "k8s.node.network.io"'
        - 'name == "k8s.pod.network.errors"'
        - 'name == "k8s.node.network.errors"'
  exporters:
    otlp:
      endpoint: ${REFINERY_ADDRESS}:4317
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
      tls:
        insecure: true

    otlp/metrics:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
        x-honeycomb-dataset: service-metrics
    otlp/kubelet_metrics:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
        x-honeycomb-dataset: "kubelet-metrics"

    otlp/logging:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
        x-honeycomb-dataset: service-logs

  service:
    pipelines:
      metrics/kubeletstats:
        receivers: [kubeletstats]
        processors: 
          - k8sattributes/kubeletstats
          - metricstransform/podnetwork_aggregation
          - metricstransform/nodenetwork_aggregation
          - filter/networkmetrics
        exporters: [otlp/kubelet_metrics]
      metrics/default:
        exporters:
        - otlp/metrics
        processors:
        - k8sattributes
        - memory_limiter
        - batch
        receivers:
        - otlp
        - prometheus
        - hostmetrics
      metrics: null
      logs: 
        exporters: [otlp/logging]
      traces:
        exporters: [otlp]
    telemetry:
      metrics: null